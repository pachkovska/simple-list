{"version":3,"sources":["components/InputField.js","components/addNewCounter/AddButton.js","components/addNewCounter/AddNewCounterSection.js","components/counterList/singleCounterElements/SingleCounterActionButton.js","components/counterList/singleCounterElements/IncrementButton.js","components/counterList/singleCounterElements/SingleCounter.js","components/AllCountersActionButton.js","components/counterList/FullCounterList.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","className","type","name","value","index","onChange","ev","placeholder","AddButton","onClick","AddNewCounterSection","useState","counterValues","setCounterValues","handleInputChange","target","count","stockName","onAddButtonClick","SingleCounterActionButton","key","handleAction","buttonName","IncrementButton","incrementNumber","step","SingleCounter","rangeValues","setRangeValue","errorState","errorText","error","setErrorState","isNaN","alert","useEffect","fromValue","toValue","handleStockChange","n","resetSingleCounter","resetAllButtonState","deleteItem","_","range","map","el","AllCountersActionButton","FullCounterList","setResetAllButtonState","newList","listToDisplay","getStockName","splice","updateCounterList","every","amountChangeHandled","Number","App","setListToDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2d57cbbf.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction InputField(props) {\n\n    return (\n        <div className={props.className}>\n            <input type=\"text\" name={props.name} value={props.value} index={props.index} onChange={(ev) => props.onChange(ev)}\n                   placeholder={props.placeholder}></input>\n        </div>\n    )\n}\n\nexport default InputField;","import React from 'react';\n\n\nfunction AddButton(props) {\n\n    return (\n        <div className=\"addButton\">\n                <button onClick={props.onClick}>ADD</button>\n        </div>\n    );\n}\n\nexport default AddButton;\n","import React, {useEffect, useState} from \"react\";\nimport InputField from '../InputField';\nimport AddButton from './AddButton';\n\nfunction AddNewCounterSection (props)  {\n\n    const [counterValues, setCounterValues] = useState({})\n\n    const handleInputChange = (ev) => {\n        const {name, value} = ev.target;\n        setCounterValues({...counterValues, [name]: value});\n    }\n\n    const onAddButtonClick = () => {\n        props.onAddButtonClick(counterValues);\n        setCounterValues({});\n    }\n\n    return (\n        <div className={\"addNewCounterSection\"}>\n            <div className={\"addNewCounterSection-title\"}>Add your stock counter below: </div>\n            <InputField\n                className={\"addCount\"}\n                onChange={(ev) => handleInputChange(ev)}\n                name={\"count\"}\n                placeholder={0}\n                value={counterValues.count || ''}\n            />\n            <InputField\n                className={\"addName\"}\n                onChange={(ev) => handleInputChange(ev)}\n                name={\"stockName\"}\n                placeholder=\"Stock Name...\"\n                value={counterValues.stockName || ''}\n            />\n            <AddButton\n                onClick={onAddButtonClick}\n            />\n        </div>\n    )\n}\n\nexport default AddNewCounterSection;","import React from \"react\";\n\nfunction SingleCounterActionButton(props) {\n    return (\n        <div className={props.className}>\n              <button key={props.stockName} onClick={props.handleAction}>{props.buttonName}</button>\n        </div>\n    )\n}\n\nexport default SingleCounterActionButton;","import React from 'react';\n\n\nfunction IncrementButton(props) {\n\n    const onButtonClick = () => {\n        props.incrementNumber();\n    }\n\n    return (\n        <div className=\"IncrementButtons-single\">\n                <button onClick={onButtonClick}>{props.step}</button>\n        </div>\n    );\n}\n\nexport default IncrementButton;\n","import React, {useState, useEffect} from \"react\";\nimport SingleCounterActionButton from \"./SingleCounterActionButton\";\nimport InputField from \"../../InputField\";\nimport IncrementButton from \"./IncrementButton\";\nimport _ from 'lodash';\n\nfunction SingleCounter(props) {\n\n    const [rangeValues, setRangeValue] = useState({});\n\n    const [error, setErrorState] = useState({\n        errorState: false,\n        errorText: '',\n    });\n\n    const handleInputChange = (ev) => {\n        const {name, value} = ev.target;\n        if (((value < 0 || value > 20) || isNaN(value)) && value !== '') {\n            alert('Sorry non-integers or numbers outside of advised range are not allowed') && setRangeValue({\n                ...rangeValues,\n                [name]: ''\n            });\n        } else {\n            setRangeValue({...rangeValues, [name]: +value});\n        }\n    }\n\n    useEffect(() => {\n        if (rangeValues.fromValue > rangeValues.toValue && rangeValues.fromValue !== 0 && rangeValues.toValue !== 0) {\n            setErrorState({\n                errorState: true,\n                errorText: 'Sorry,  begin incrementing value can not be bigger than end incrementing value.',\n            });\n        } else {\n            setErrorState({\n                errorState: false,\n                errorText: '',\n            });\n        }\n    }, [rangeValues]);\n\n    const handleStockChange = (n) => {\n        props.handleStockChange(n);\n    }\n\n    const resetSingleCounter = (index) => {\n        setRangeValue({});\n        props.resetSingleCounter(index);\n    }\n\n    useEffect((index) => {\n        if(props.resetAllButtonState) resetSingleCounter(index);\n    }, [props.resetAllButtonState]);\n\n\n    return (\n        <div className=\"counterList-single\">\n            <InputField\n                className={\"fromValue\"}\n                onChange={(ev) => handleInputChange(ev)}\n                name={\"fromValue\"}\n                placeholder={0}\n                value={rangeValues.fromValue || ''}\n                index={props.index}\n            />\n            <div className={\"stockCount\"}>{props.count} </div>\n            <div className={\"stockName\"}>{props.stockName} </div>\n            <SingleCounterActionButton\n                stockName={props.stockName}\n                index={props.index}\n                handleAction={resetSingleCounter}\n                buttonName={\"RESET\"}\n                className={\"counterActionButton--reset\"}\n            />\n            <SingleCounterActionButton\n                stockName={props.stockName}\n                index={props.index}\n                handleAction={props.deleteItem}\n                buttonName={\"DELETE\"}\n                className={\"counterActionButton--delete\"}\n            />\n            <InputField\n                className={\"toValue\"}\n                onChange={(ev) => handleInputChange(ev)}\n                name={\"toValue\"}\n                placeholder={0}\n                value={rangeValues.toValue || ''}\n                index={props.index}\n            />\n            {error.errorState\n                ? null\n                // <div className=\"errorMessage\">{error.errorText}</div>\n                : rangeValues.fromValue && rangeValues.toValue\n                    ? <>\n                        <div className=\"incrementButtons\">\n                            {\n                                _.range(rangeValues.fromValue, rangeValues.toValue + 1, 1).map(el => (\n                                    <IncrementButton key={el} step={el}\n                                                     incrementNumber={() => handleStockChange(el)}/>\n                                ))\n                            }\n                        </div>\n                        <div className=\"decrementButtons\">\n                            {\n                                _.range(rangeValues.fromValue, rangeValues.toValue + 1, 1).map(el => (\n                                    <IncrementButton key={el} step={-el}\n                                                     incrementNumber={() => handleStockChange(-el)}/>\n                                ))\n                            }\n                        </div>\n                    </> : null\n            }\n        </div>\n    )\n}\n\nexport default SingleCounter;","import React from \"react\";\n\nfunction AllCountersActionButton(props) {\n    return (\n        <div className={props.className}>\n            <button onClick={props.handleAction}>{props.buttonName}</button>\n        </div>\n    )\n}\n\nexport default AllCountersActionButton;","import React, {useState, useEffect} from \"react\";\nimport SingleCounter from \"./singleCounterElements/SingleCounter\";\nimport AllCountersActionButton from \"../AllCountersActionButton\";\n\nfunction FullCounterList(props) {\n\n    const [resetAllButtonState, setResetAllButtonState] = useState(false);\n\n    const deleteItem = (index) => {\n        let newList = props.listToDisplay;\n        newList.splice(index, 1);\n        props.updateCounterList(newList);\n    }\n\n    const handleStockChange = (n, index) => {\n        let newList = props.listToDisplay;\n        const amountChangeHandled = Number(newList[index].count) + +n;\n        const getStockName = newList[index].stockName;\n        newList.splice(index, 1, {count: amountChangeHandled, stockName: getStockName});\n        props.updateCounterList(newList);\n    }\n\n    const resetSingleCounter = (index) => {\n        let newList = props.listToDisplay;\n        const getStockName = newList[index].stockName;\n        newList.splice(index, 1, {count: 0, stockName: getStockName});\n        props.updateCounterList(newList);\n    }\n\n\n    const handleAllCountersDelete = () => {\n        let newList = [];\n        props.updateCounterList(newList);\n    }\n\n    const handleAllCountersReset = () => {\n        let newList = props.listToDisplay;\n        setResetAllButtonState(!resetAllButtonState);\n        newList.map((el, index) => resetSingleCounter(index));\n\n    }\n\n    useEffect(() => {\n        if(props.listToDisplay.every(el => el.count ===0) && resetAllButtonState) {\n            setResetAllButtonState(!resetAllButtonState);\n        }\n    }, [resetAllButtonState]);\n\n    return (\n        <div className=\"allCountersSection\">\n            <div className=\"counterList\">\n                {\n                    props.listToDisplay &&\n                    props.listToDisplay.map((el, index) => (\n                        <SingleCounter\n                            deleteItem={() => deleteItem(index)}\n                            index={index}\n                            count={el.count}\n                            stockName={el.stockName}\n                            handleStockChange={(n) => handleStockChange(n, index)}\n                            resetSingleCounter={() => resetSingleCounter(index)}\n                            listToDisplay={props.listToDisplay}\n                            resetAllButtonState={resetAllButtonState}\n                        />\n                    ))\n                }\n            </div>\n            <AllCountersActionButton\n                buttonName={\"RESET ALL\"}\n                handleAction={handleAllCountersReset}\n                className={\"allCountersActionButton--resetAll\"}\n            />\n            <AllCountersActionButton\n                buttonName={\"DELETE ALL\"}\n                handleAction={handleAllCountersDelete}\n                className={\"allCountersActionButton--deleteAll\"}\n            />\n        </div>\n    )\n}\n\nexport default FullCounterList;","import React, {useState} from 'react';\nimport './App.css';\nimport AddNewCounterSection from \"./components/addNewCounter/AddNewCounterSection\";\nimport FullCounterList from './components/counterList/FullCounterList';\n\nfunction App() {\n\n    const [listToDisplay, setListToDisplay] = useState([]);\n\n    const addItemToList = (counterValues) => {\n        setListToDisplay([...listToDisplay, counterValues]);\n    }\n\n    const updateCounterList = (newList) => {\n        setListToDisplay([...newList]);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"appHeader\">Your Stock Counter App On A Single Page</div>\n            <FullCounterList\n                listToDisplay={listToDisplay}\n                updateCounterList={updateCounterList}\n                handleStockChange={updateCounterList}\n            />\n            <AddNewCounterSection\n                onAddButtonClick={addItemToList}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}